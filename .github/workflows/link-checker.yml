name: Weekly Link Health Check

on:
  schedule:
    # Run every Monday at 9:00 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch: # Allow manual trigger

permissions:
  contents: read
  issues: write

jobs:
  check-links:
    runs-on: ubuntu-latest
    name: Check README Links

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          npm install -g markdown-link-check

      - name: Check links in README.md
        id: link-check
        continue-on-error: true
        run: |
          echo "Running link check..."
          
          # Create markdown-link-check config
          cat > link-check-config.json << 'EOF'
          {
            "ignorePatterns": [
              {
                "pattern": "^https://github.com/.+/blob/.+#"
              }
            ],
            "timeout": "20s",
            "retryOn429": true,
            "retryCount": 3,
            "fallbackRetryDelay": "30s",
            "aliveStatusCodes": [200, 206, 429],
            "httpHeaders": [
              {
                "urls": ["https://github.com"],
                "headers": {
                  "Accept": "text/html"
                }
              }
            ]
          }
          EOF
          
          # Run link check and capture output
          markdown-link-check README.md -c link-check-config.json -q > link-check-output.txt 2>&1 || true
          
          cat link-check-output.txt
          
          # Parse results
          TOTAL_LINKS=$(grep -oP '\d+(?= links checked)' link-check-output.txt || echo "0")
          DEAD_LINKS=$(grep '✖' link-check-output.txt | wc -l || echo "0")
          HEALTHY_LINKS=$((TOTAL_LINKS - DEAD_LINKS))
          
          echo "total_links=$TOTAL_LINKS" >> $GITHUB_OUTPUT
          echo "dead_links=$DEAD_LINKS" >> $GITHUB_OUTPUT
          echo "healthy_links=$HEALTHY_LINKS" >> $GITHUB_OUTPUT
          
          # Extract dead link details
          echo "DEAD_LINK_DETAILS<<EOF" >> $GITHUB_OUTPUT
          grep '✖' link-check-output.txt | sed 's/^[[:space:]]*//' || echo "None" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Set exit code based on dead links
          if [ "$DEAD_LINKS" -gt 0 ]; then
            echo "has_dead_links=true" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "has_dead_links=false" >> $GITHUB_OUTPUT
            exit 0
          fi

      - name: Create detailed issue for dead links
        if: steps.link-check.outputs.has_dead_links == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const totalLinks = '${{ steps.link-check.outputs.total_links }}';
            const deadLinks = '${{ steps.link-check.outputs.dead_links }}';
            const healthyLinks = '${{ steps.link-check.outputs.healthy_links }}';
            const deadLinkDetails = `${{ steps.link-check.outputs.DEAD_LINK_DETAILS }}`;
            
            const issueTitle = `🔗 Link Health Report: ${deadLinks} Dead Link(s) Found`;
            const issueBody = `## 📊 Link Health Summary
            
            | Status | Count |
            |--------|-------|
            | ✅ Healthy Links | ${healthyLinks} |
            | ❌ Dead Links | ${deadLinks} |
            | 📝 Total Links | ${totalLinks} |
            
            ## 🔴 Dead Links Detected
            
            The following links returned errors:
            
            \`\`\`
            ${deadLinkDetails}
            \`\`\`
            
            ## 📋 Action Items
            
            - [ ] Verify each dead link manually
            - [ ] Update or remove broken links
            - [ ] Check if sites are temporarily down
            - [ ] Find alternative sources for removed content
            
            ## 🤖 Automation Info
            
            - **Checked File**: README.md
            - **Check Date**: ${new Date().toISOString().split('T')[0]}
            - **Workflow**: [Link Health Check](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            ---
            
            *This issue was automatically generated by the weekly link checker.*
            *To re-run the check manually, go to [Actions](https://github.com/${{ github.repository }}/actions/workflows/link-checker.yml) and click "Run workflow".*`;
            
            // Check for existing open issues
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'automated-link-check',
              per_page: 1
            });
            
            if (existingIssues.data.length > 0) {
              // Update existing issue
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssues.data[0].number,
                title: issueTitle,
                body: issueBody
              });
              
              // Add comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssues.data[0].number,
                body: `🔄 **Updated**: Re-checked on ${new Date().toISOString().split('T')[0]}\n\nNew results: ${deadLinks} dead link(s) found.`
              });
            } else {
              // Create new issue
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issueTitle,
                body: issueBody,
                labels: ['automated-link-check', 'documentation', 'bug']
              });
            }

      - name: Post success comment (no dead links)
        if: steps.link-check.outputs.has_dead_links == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const totalLinks = '${{ steps.link-check.outputs.total_links }}';
            
            // Close any existing open issues
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'automated-link-check',
              per_page: 100
            });
            
            for (const issue of existingIssues.data) {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                state: 'closed'
              });
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: `✅ **All links are now healthy!**\n\n${totalLinks} links checked successfully on ${new Date().toISOString().split('T')[0]}.\n\nClosing this issue automatically.`
              });
            }
            
            console.log(`✅ All ${totalLinks} links are healthy!`);
